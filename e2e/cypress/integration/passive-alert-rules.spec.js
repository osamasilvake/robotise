context('Passive alert rules', () => {
  it('Navigates with menu bar', () => {
    cy.login();

    cy.get('[data-testing-id=NAV_ITEM_PASSIVE_ALERT_RULES]').should(
      'not.be.visible'
    );

    cy.get('[data-testing-id=NAV_ITEM_ALERT_CONFIG]').click();

    cy.get('[data-testing-id=NAV_ITEM_PASSIVE_ALERT_RULES]')
      .should('be.visible')
      .click();

    cy.location('pathname').should('equal', '/passive-alert-rules');
  });

  it('Navigates back from new page', () => {
    cy.login();

    cy.goToPassiveAlertRules();

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_NEW_RULE_BTN]').click();

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_NEW_RULE_BACK_LINK]').click();

    cy.location('pathname').should('equal', '/passive-alert-rules');
  });

  it('Returns back if cancel button clicked', () => {
    cy.login();

    cy.goToPassiveAlertRulesNew();

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CANCEL]').click();

    cy.location('pathname').should('equal', '/passive-alert-rules');
  });

  /**
   * Testing all CRUD operations together to have more reliable results.
   * Since there is only one environment yet and no DB seeding implemented
   * tests ror viewing, editing and deleting can't be running in parallel.
   *
   */
  it('CRUD operations work for new alert rule', () => {
    cy.login();

    cy.goToPassiveAlertRulesNew();

    /**
     * CREATE
     */
    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CODE]')
      .type('_')
      .should('contain', 'Please use only English letters or integers.')
      .type('{backspace}')
      .should('not.contain', 'Please use only English letters or integers.')
      .type('a ')
      .should('contain', 'Please use only English letters or integers.')
      .type('{backspace}')
      .should('not.contain', 'Please use only English letters or integers.')
      .type('{backspace}')
      .type('cypresscode');

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CREATE]').should(
      'be.disabled'
    );

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_MESSAGE]')
      .find('input')
      .type('Automatically generated by Cypress');

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CREATE]').should(
      'be.disabled'
    );

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_KEY]')
      .type('_')
      .should('contain', 'Please use only English characters and "." symbol.')
      .type('{backspace}')
      .should(
        'not.contain',
        'Please use only English characters and "." symbol.'
      )
      .type('cypress.Key');

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CREATE]').should(
      'be.disabled'
    );

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_STATUS]').click();

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_STATUS_NONE]'
    ).click();

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_STATUS]')
      .parent()
      .should('contain', 'Please choose a status.')
      .click();

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_STATUS_ACTIVE]'
    ).click();

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_STATUS]')
      .parent()
      .should('contain', 'active');

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CREATE]').should(
      'be.disabled'
    );

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_LEVEL]').click();

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_LEVEL_NONE]').click();

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_LEVEL]')
      .parent()
      .should('contain', 'Please choose a level.')
      .click();

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_LEVEL_WARNING]'
    ).click();

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_LEVEL]')
      .parent()
      .should('contain', 'warning');

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CREATE]').should(
      'be.disabled'
    );

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_DESTINATION_robot-twin]'
    ).click();

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CREATE]').should(
      'be.disabled'
    );

    cy.get(
      '[data-testing-id^=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_ROW_]'
    ).should('have.length', 1);

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_DELETE_0]'
    ).should('be.disabled');

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_ADD]'
    ).click();

    cy.get(
      '[data-testing-id^=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_ROW_]'
    ).should('have.length', 2);

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_DELETE_0]'
    ).should('not.be.disabled');

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_DELETE_1]')
      .should('not.be.disabled')
      .click();

    cy.get(
      '[data-testing-id^=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_ROW_]'
    ).should('have.length', 1);

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_FIELD_0]'
    ).type('a');

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_0]'
    ).click();

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_E_0]'
    ).click();

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_TYPE_0]'
    ).click();

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_TYPE_NUMBER_0]'
    ).click();

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_VALUE_0]'
    ).type('b');

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_VALUE_0]')
      .parent()
      .parent()
      .should('contain', 'Please enter value in a proper format.');

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_TYPE_0]'
    ).click();

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_TYPE_STRING_0]'
    ).click();

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_VALUE_0]')
      .parent()
      .parent()
      .should('not.contain', 'Please enter value in a proper format.');

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CREATE]')
      .should('not.be.disabled')
      .click();

    cy.get('[data-testing-id=SNACKBAR_MESSAGE_SUCCESS]').should(
      'contain',
      'Alert rule was successfully created.'
    );

    cy.get('[data-testing-id=PASSIVE_ALERT_RULE_PAGE]')
      .should('contain', 'cypresscode')
      .and('contain', 'cypress.Key')
      .and('contain', 'robot-twin')
      .and('contain', '==');

    /**
     * UPDATE
     */
    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDIT_BTN]').click();

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_0]'
    ).click();

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_CONDITION_NE_0]'
    ).click();

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_NOTES]').type(
      'Cypress note...'
    );

    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_EDITABLE_SAVE]').click();

    cy.get('[data-testing-id=SNACKBAR_MESSAGE_SUCCESS]').should(
      'contain',
      'Alert rule was successfully updated.'
    );

    cy.get('[data-testing-id=PASSIVE_ALERT_RULE_PAGE]')
      .should('contain', 'cypresscode')
      .and('contain', 'cypress.Key')
      .and('contain', 'robot-twin')
      .and('contain', '!=')
      .and('contain', 'Cypress note...');

    /**
     * READ
     */
    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_BACK_LINK]').click();

    cy.get(
      '[data-testing-id=PASSIVE_ALERT_RULES_TABLE_ROW_cypresscode]'
    ).click();

    /**
     * DELETE
     */
    cy.get('[data-testing-id=PASSIVE_ALERT_RULES_DELETE_BTN]').click();

    cy.get('[data-testing-id=SNACKBAR_MESSAGE_SUCCESS]').should(
      'contain',
      'Alert rule was successfully deleted.'
    );
  });
});
